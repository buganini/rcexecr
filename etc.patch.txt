diff -ruN /etc.orig/defaults/rc.conf /etc/defaults/rc.conf
--- /etc.orig/defaults/rc.conf	2012-12-23 21:13:14.000000000 +0800
+++ /etc/defaults/rc.conf	2012-12-23 21:32:12.000000000 +0800
@@ -24,6 +24,7 @@
 rc_debug="NO"		# Set to YES to enable debugging output from rc.d
 rc_info="NO"		# Enables display of informational messages at boot.
 rc_startmsgs="YES" 	# Show "Starting foo:" messages at boot
+rcexecr_parallel="NO"	# Set to YES to enable parallel execution of rc-scripts.
 rcshutdown_timeout="90" # Seconds to wait before terminating rc.shutdown
 early_late_divider="FILESYSTEMS"	# Script that separates early/late
 			# stages of the boot process.  Make sure you know
diff -ruN /etc.orig/rc /etc/rc
--- /etc.orig/rc	2012-12-23 21:13:14.000000000 +0800
+++ /etc/rc	2012-12-23 21:38:43.000000000 +0800
@@ -74,44 +74,15 @@
 skip="-s nostart"
 if [ `/sbin/sysctl -n security.jail.jailed` -eq 1 ]; then
 	skip="$skip -s nojail"
-	if [ "$early_late_divider" = "FILESYSTEMS" ]; then
-		early_late_divider=NETWORKING
-	fi
 fi
 
-# Do a first pass to get everything up to $early_late_divider so that
-# we can do a second pass that includes $local_startup directories
-#
-files=`rcorder ${skip} /etc/rc.d/* 2>/dev/null`
-
-_rc_elem_done=' '
-for _rc_elem in ${files}; do
-	run_rc_script ${_rc_elem} ${_boot}
-	_rc_elem_done="${_rc_elem_done}${_rc_elem} "
-
-	case "$_rc_elem" in
-	*/${early_late_divider})	break ;;
-	esac
-done
-
-unset files local_rc
-
-# Now that disks are mounted, for each dir in $local_startup
-# search for init scripts that use the new rc.d semantics.
-#
-case ${local_startup} in
-[Nn][Oo] | '') ;;
-*)	find_local_scripts_new ;;
-esac
-
-files=`rcorder ${skip} /etc/rc.d/* ${local_rc} 2>/dev/null`
-for _rc_elem in ${files}; do
-	case "$_rc_elem_done" in
-	*" $_rc_elem "*)	continue ;;
-	esac
-
-	run_rc_script ${_rc_elem} ${_boot}
-done
+load_rc_config 'rcexecr'
+if checkyesno rcexecr_parallel; then
+	rcexecr_parallel=""
+else
+	rcexecr_parallel=-q
+fi
+env ARG0=\? ARG1=${_boot} rcexecr ${rcexecr_parallel} -x ${skip} /etc/rc.d/* 2>/dev/null
 
 echo ''
 date
diff -ruN /etc.orig/rc.d/FILESYSTEMS /etc/rc.d/FILESYSTEMS
--- /etc.orig/rc.d/FILESYSTEMS	2012-12-23 21:13:14.000000000 +0800
+++ /etc/rc.d/FILESYSTEMS	2012-12-23 21:18:36.000000000 +0800
@@ -6,7 +6,18 @@
 # PROVIDE: FILESYSTEMS
 # REQUIRE: root mountcritlocal cleanvar zfs
 
-#	This is a dummy dependency, for services which require file systems
-#	to be mounted before starting.  It also serves as the default early /
-#	late divider; after this point, rc.d directories are rescanned to
-#	catch scripts from other file systems than /.
+if [ `/sbin/sysctl -n security.jail.jailed` -eq 1 ]; then
+	exit
+fi
+
+. /etc/rc.subr
+load_rc_config 'XXX'
+
+unset local_rc
+
+case ${local_startup} in
+[Nn][Oo] | '') ;;
+*)	find_local_scripts_new ;;
+esac
+
+env ARG0=\? ARG1=${_boot} /sbin/rcexecr -x ${local_rc} 2>/dev/null
diff -ruN /etc.orig/rc.d/NETWORKING /etc/rc.d/NETWORKING
--- /etc.orig/rc.d/NETWORKING	2012-12-23 21:13:14.000000000 +0800
+++ /etc/rc.d/NETWORKING	2012-12-23 21:18:30.000000000 +0800
@@ -8,5 +8,18 @@
 # REQUIRE: defaultroute routed mrouted route6d mroute6d resolv bridge
 # REQUIRE: static_arp static_ndp
 
-#	This is a dummy dependency, for services which require networking
-#	to be operational before starting.
+if [ `/sbin/sysctl -n security.jail.jailed` -ne 1 ]; then
+	exit
+fi
+
+. /etc/rc.subr
+load_rc_config 'XXX'
+
+unset local_rc
+
+case ${local_startup} in
+[Nn][Oo] | '') ;;
+*)	find_local_scripts_new ;;
+esac
+
+env ARG0=\? ARG1=${_boot} /sbin/rcexecr -x ${local_rc} 2>/dev/null
diff -ruN /etc.orig/rc.shutdown /etc/rc.shutdown
--- /etc.orig/rc.shutdown	2012-12-23 21:13:14.000000000 +0800
+++ /etc/rc.shutdown	2012-12-23 21:38:28.000000000 +0800
@@ -47,18 +47,6 @@
 
 load_rc_config 'XXX'
 
-# reverse_list list
-#	print the list in reverse order
-#
-reverse_list()
-{
-	_revlist=
-	for _revfile in $*; do
-		_revlist="$_revfile${script_name_sep}$_revlist"
-	done
-	echo $_revlist
-}
-
 # If requested, start a watchdog timer in the background which
 # will terminate rc.shutdown if rc.shutdown doesn't complete
 # within the specified time.
@@ -80,20 +68,21 @@
 # Determine the shutdown order of the /etc/rc.d scripts,
 # and perform the operation
 #
-rcorder_opts="-k shutdown"
-[ `/sbin/sysctl -n security.jail.jailed` -eq 1 ] && rcorder_opts="$rcorder_opts -s nojail"
+rcexecr_opts="-k shutdown"
+[ `/sbin/sysctl -n security.jail.jailed` -eq 1 ] && rcexecr_opts="$rcexecr_opts -s nojail"
 
 case ${local_startup} in
 [Nn][Oo] | '') ;;
 *)     find_local_scripts_new ;;
 esac
 
-files=`rcorder ${rcorder_opts} /etc/rc.d/* ${local_rc} 2>/dev/null`
-
-for _rc_elem in `reverse_list $files`; do
-	debug "run_rc_script $_rc_elem faststop"
-	run_rc_script $_rc_elem faststop
-done
+load_rc_config 'rcexecr'
+if checkyesno rcexecr_parallel; then
+	rcexecr_parallel=""
+else
+	rcexecr_parallel=-q
+fi
+env ARG0=\? ARG1=faststop rcexecr ${rcexecr_parallel} -rx ${rcexecr_opts} /etc/rc.d/* ${local_rc} 2>/dev/null
 
 # Terminate the background watchdog timer (if it is running)
 #
diff -ruN /etc.orig/rc.subr /etc/rc.subr
--- /etc.orig/rc.subr	2012-12-23 21:13:14.000000000 +0800
+++ /etc/rc.subr	2012-12-23 21:20:59.000000000 +0800
@@ -156,6 +156,7 @@
 	esac
 	if [ "$autoboot" = yes -o "$always" = true ]; then
 		echo "ERROR: ABORTING BOOT (sending SIGTERM to parent)!"
+		killall -TERM rcexecr
 		kill -TERM ${RC_PID}
 	fi
 	exit 1
